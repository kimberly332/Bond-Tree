// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to user documents for username availability check
    match /users/{userId} {
      allow read: if true;
    }
    
    // Existing user document write rules
    match /users/{userId} {
      allow read: if request.auth != null && 
        (resource.data.authorId == request.auth.uid || 
         resource.data.privacy == "public" ||
         (resource.data.privacy == "friends" && 
          resource.data.authorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends) ||
         resource.data.privacy == "passcode"); // Allow reading passcode-protected posts
  
      allow create: if request.auth != null 
                    && request.resource.data.username.size() >= 3 
                    && request.resource.data.username.size() <= 15
                    && request.resource.data.username.matches('^[a-zA-Z0-9_]+$');
      
      allow update: if request.auth.uid == userId || 
              // Allow adding/removing friend requests and sent requests
              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friendRequests', 'friends', 'sentFriendRequests']);
              
      allow delete: if request.auth.uid == userId;
    }
    
    // Posts collection rules
    match /posts/{postId} {
      // Allow reading posts if:
      // 1. The user is authenticated and is the author
      // 2. The post is public
      // 3. The post is for friends and the user is a friend of the author
      allow read: if request.auth != null && 
        (resource.data.authorId == request.auth.uid || 
         resource.data.privacy == "public" ||
         (resource.data.privacy == "friends" && 
          resource.data.authorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends));
          
      // Allow creating posts if authenticated and setting themselves as author
      allow create: if request.auth != null &&
                    request.resource.data.authorId == request.auth.uid;
                    
      // Allow update and delete if authenticated and is the author
      allow update, delete: if request.auth != null && 
                             resource.data.authorId == request.auth.uid;
    }
  }
}